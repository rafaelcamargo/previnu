angular.module('templates', ['components/icon/icon-template.html', 'components/logo/logo-template.html', 'components/retirement-simulation-form/retirement-simulation-form-template.html', 'components/retirement-simulation-panel/retirement-simulation-panel-template.html', 'components/symbol-value/symbol-value-template.html', 'components/topbar/topbar-template.html', 'components/viewport/viewport-template.html', 'views/home/home-template.html', 'views/simulation/simulation-template.html']);

angular.module("components/icon/icon-template.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("components/icon/icon-template.html",
    "<i class=\"icon {{$ctrl.icon}}\"></i>\n" +
    "");
}]);

angular.module("components/logo/logo-template.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("components/logo/logo-template.html",
    "<div class=\"logo-container\">\n" +
    "  <div class=\"logo\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("components/retirement-simulation-form/retirement-simulation-form-template.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("components/retirement-simulation-form/retirement-simulation-form-template.html",
    "<form class=\"retirement-simulation-form\" ng-submit=\"$ctrl.simulate()\">\n" +
    "  <div class=\"retirement-simulation-form-item\" ng-repeat=\"setting in $ctrl.settings\">\n" +
    "    <div class=\"retirement-simulation-form-item-label\" ng-bind=\"setting.title\"></div>\n" +
    "    <div class=\"range\">\n" +
    "      <input\n" +
    "        type=\"range\"\n" +
    "        name=\"{{ setting.type }}\"\n" +
    "        ng-model=\"setting.amount.current\"\n" +
    "        min=\"{{ setting.amount.min }}\"\n" +
    "        max=\"{{ setting.amount.max }}\"\n" +
    "        step=\"{{ setting.amount.step }}\" />\n" +
    "    </div>\n" +
    "    <symbol-value data-symbol=\"{{ setting.amount.symbol }}\">\n" +
    "      {{ setting.amount.current | commaDecimal: setting.amount.precision }}\n" +
    "    </symbol-value>\n" +
    "  </div>\n" +
    "  <button type=\"submit\" class=\"button button-primary\">\n" +
    "    Simular\n" +
    "  </button>\n" +
    "</form>\n" +
    "");
}]);

angular.module("components/retirement-simulation-panel/retirement-simulation-panel-template.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("components/retirement-simulation-panel/retirement-simulation-panel-template.html",
    "<div class=\"retirement-simulation-panel\">\n" +
    "  <div class=\"retirement-simulation-panel-content {{ $ctrl.simulationPanelContentCssClass }}\">\n" +
    "    <div class=\"retirement-simulation-panel-monthly-benefit-container\" data-js=\"monthly-benefit-container\">\n" +
    "      <p>\n" +
    "        Benefício Mensal Previsto*\n" +
    "      </p>\n" +
    "      <p class=\"retirement-simulation-panel-monthly-benefit-amount\">\n" +
    "        <symbol-value data-symbol=\"currency\">\n" +
    "          {{ 1500 | brlCurrency }}\n" +
    "        </symbol-value>\n" +
    "      </p>\n" +
    "      <p class=\"retirement-simulation-panel-monthly-benefit-caption\">\n" +
    "        Conversão de 19583.53 para os valores atuais considerando a inflação informada.\n" +
    "      </p>\n" +
    "    </div>\n" +
    "    <div class=\"retirement-simulation-panel-list-container\" data-js=\"simulation-list-container\">\n" +
    "      <div class=\"retirement-simulation-panel-list-header\" data-js=\"simulation-list-header\">\n" +
    "        <div class=\"retirement-simulation-panel-item\">\n" +
    "          <div class=\"retirement-simulation-panel-item-detail retirement-simulation-panel-item-detail-date\">\n" +
    "            Mês\n" +
    "          </div>\n" +
    "          <div class=\"retirement-simulation-panel-item-detail retirement-simulation-panel-item-detail-deposit\">\n" +
    "            Depósito\n" +
    "          </div>\n" +
    "          <div class=\"retirement-simulation-panel-item-detail retirement-simulation-panel-item-detail-profit\">\n" +
    "            Rendimento\n" +
    "          </div>\n" +
    "          <div class=\"retirement-simulation-panel-item-detail retirement-simulation-panel-item-detail-balance\">\n" +
    "            Saldo\n" +
    "          </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "      <div class=\"retirement-simulation-panel-list\" ng-style=\"$ctrl.simulationListHeight\">\n" +
    "        <div class=\"retirement-simulation-panel-item\" ng-repeat=\"month in $ctrl.simulation\">\n" +
    "          <div class=\"retirement-simulation-panel-item-detail retirement-simulation-panel-item-detail-date\"\n" +
    "            ng-bind=\"month.date | date : 'MM/yy'\">\n" +
    "          </div>\n" +
    "          <div class=\"retirement-simulation-panel-item-detail retirement-simulation-panel-item-detail-deposit\"\n" +
    "            ng-bind=\"month.monthlyContribution | brlCurrency\">\n" +
    "          </div>\n" +
    "          <div class=\"retirement-simulation-panel-item-detail retirement-simulation-panel-item-detail-profit\"\n" +
    "            ng-bind=\"month.monthlyProfit | brlCurrency\">\n" +
    "          </div>\n" +
    "          <div class=\"retirement-simulation-panel-item-detail retirement-simulation-panel-item-detail-balance\"\n" +
    "            ng-bind=\"month.balance | brlCurrency\">\n" +
    "          </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("components/symbol-value/symbol-value-template.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("components/symbol-value/symbol-value-template.html",
    "<div class=\"symbol-value symbol-value-{{ $ctrl.symbol }}\">\n" +
    "  <ng-transclude></ng-transclude>\n" +
    "</div>\n" +
    "");
}]);

angular.module("components/topbar/topbar-template.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("components/topbar/topbar-template.html",
    "<div class=\"topbar-container\">\n" +
    "  <div class=\"topbar-content\" ng-if=\"$ctrl.title\">\n" +
    "    <div class=\"topbar-back-trigger\" ng-click=\"$ctrl.back()\">\n" +
    "      <icon data-icon=\"ion-ios-arrow-back\"></icon>\n" +
    "      <icon data-icon=\"ion-android-arrow-back\"></icon>\n" +
    "    </div>\n" +
    "    <h1 ng-bind=\"$ctrl.title\"></h1>\n" +
    "  </div>\n" +
    "  <div class=\"topbar-content\" ng-if=\"!$ctrl.title\">\n" +
    "    <ng-transclude></ng-transclude>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("components/viewport/viewport-template.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("components/viewport/viewport-template.html",
    "<div class=\"viewport\" ng-style=\"$ctrl.style\">\n" +
    "  <ng-transclude></ng-transclude>\n" +
    "</div>\n" +
    "");
}]);

angular.module("views/home/home-template.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("views/home/home-template.html",
    "<topbar>\n" +
    "  <logo></logo>\n" +
    "</topbar>\n" +
    "<viewport>\n" +
    "  <retirement-simulation-form></retirement-simulation-form>\n" +
    "</viewport>\n" +
    "");
}]);

angular.module("views/simulation/simulation-template.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("views/simulation/simulation-template.html",
    "<topbar data-title=\"Simulação\">\n" +
    "</topbar>\n" +
    "<viewport>\n" +
    "  <retirement-simulation-panel></retirement-simulation-panel>\n" +
    "</viewport>\n" +
    "");
}]);

(function(){

  'use strict';

  window.app = angular.module('previnu', [
    'ionic',
    'templates',
    'angulartics',
    'angulartics.google.analytics'
  ])

  .run(function($ionicPlatform) {
    $ionicPlatform.ready(function() {
      // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
      // for form inputs)
      if (window.cordova && window.cordova.plugins && window.cordova.plugins.Keyboard) {
        cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
        cordova.plugins.Keyboard.disableScroll(true);

      }
      if (window.StatusBar) {
        // org.apache.cordova.statusbar required
        StatusBar.styleDefault();
      }
    });
  })

  .config(function($stateProvider, $urlRouterProvider) {
    var VIEWS_ROOT = 'views';

    function getViewTemplateUrl(view){
      return [VIEWS_ROOT,view,view].join('/') + '-template.html';
    }

    $stateProvider.state('home', {
      url: '/',
      templateUrl: getViewTemplateUrl('home')
    }).state('simulation', {
      url: '/simulation',
      templateUrl: getViewTemplateUrl('simulation')
    });

    $urlRouterProvider.otherwise('/');
  });

}());

(function(){
  'use strict';

  app.component('icon', {
    templateUrl: 'components/icon/icon-template.html',
    bindings: {
      icon: '@'
    }
  });

}());

(function(){

  app.component('logo', {
    templateUrl: 'components/logo/logo-template.html'
  });

}());

(function(){

  function retirementSimulationFormController($timeout, $location){
    var _public = this;

    _public.settings = [
      {
        title: 'Aplicação Inicial',
        type: 'initialDeposit',
        amount: {
          min: 1000,
          max: 50000,
          step: 500,
          current: 0,
          symbol: 'currency',
          precision: 2
        }
      },{
        title: 'Contribuição Mensal',
        type: 'monthlyContribution',
        amount: {
          min: 300,
          max: 5000,
          step: 100,
          current: 0,
          symbol: 'currency',
          precision: 2
        }
      },{
        title: 'Rentabilidade Anual',
        type: 'annualInterest',
        amount: {
          min: 3,
          max: 20,
          step: 0.5,
          current: 14,
          symbol: 'percent',
          precision: 1
        }
      },{
        title: 'Inflação Anual',
        type: 'annualInflation',
        amount: {
          min: 1,
          max: 20,
          step: 0.5,
          current: 10,
          symbol: 'percent',
          precision: 1
        }
      },{
        title: 'Período de Contribuição',
        type: 'contributionPeriod',
        amount: {
          min: 5,
          max: 50,
          step: 0.5,
          current: 30,
          symbol: 'year',
          precision: 1
        }
      }];

      _public.simulate = function(){
        var params = buildUrlParams();
        $location.path('simulation').search(params);
      };

      function buildUrlParams(){
        var params = {};
        for (var i = 0; i < _public.settings.length; i++){
          var setting = _public.settings[i];
          params[setting.type] = setting.amount.current;
        }
        return params;
      }

      $timeout(function(){
        _public.settings[0].amount.current = 5000;
        _public.settings[1].amount.current = 800;
      }, 50);
  }

  app.component('retirementSimulationForm', {
    templateUrl: 'components/retirement-simulation-form/retirement-simulation-form-template.html',
    controller: ['$timeout', '$location', retirementSimulationFormController]
  });

}());

(function(){

  function retirementSimulationPanelController($window, $location, $timeout, retirementSimulationService){
    var _public = this;

    _public.$onInit = function(){
      var settings = getUrlParams();
      $timeout(function(){
        _public.simulation = buildSimulation(settings);
        _public.simulationListHeight = getSimulationListHeight();
        _public.simulationPanelContentCssClass = 'retirement-simulation-panel-content-loaded';
      }, 1000);
    };

    function getUrlParams(){
      return $location.search();
    }

    function buildSimulation(settings){
      return retirementSimulationService.build({
        initialDeposit: parseSetting(settings.initialDeposit),
        monthlyContribution: parseSetting(settings.monthlyContribution),
        annualInterest: parseSetting(settings.annualInterest),
        annualInflation: parseSetting(settings.annualInflation),
        contributionPeriod: parseSetting(settings.contributionPeriod)
      });
    }

    function parseSetting(setting){
      return parseFloat(setting);
    }

    function getSimulationListHeight(){
      var viewportElement = getElement('viewport > div');
      var monthlyBenefitContainerElement = getElement('[data-js=monthly-benefit-container]');
      var simulationListContainerElement = getElement('[data-js=simulation-list-container]');
      var simulationListHeaderElement = getElement('[data-js=simulation-list-header]');
      var viewportHeight = getStyleNumericalProperty(viewportElement, 'height');
      var viewportPaddingTop = getStyleNumericalProperty(viewportElement, 'paddingTop');
      var monthlyBenefitContainerHeight = getStyleNumericalProperty(monthlyBenefitContainerElement, 'height');
      var simulationListContainerMarginTop = getStyleNumericalProperty(simulationListContainerElement, 'marginTop');
      var simulationListHeaderHeight = getStyleNumericalProperty(simulationListHeaderElement, 'height');
      return {
        height: [viewportHeight - viewportPaddingTop - monthlyBenefitContainerHeight - simulationListContainerMarginTop - simulationListHeaderHeight, 'px'].join('')
      };
    }

    function getElement(selector){
      return document.querySelectorAll(selector)[0];
    }

    function getStyleNumericalProperty(element, property){
      return parseFloat($window.getComputedStyle(element)[property]);
    }

    // _public.monthlyBenefitAmount = retirementSimulationService.getMonthlyBenefitAmount();
  }

  app.component('retirementSimulationPanel', {
    templateUrl: 'components/retirement-simulation-panel/retirement-simulation-panel-template.html',
    controller: ['$window', '$location', '$timeout', 'retirementSimulationService', retirementSimulationPanelController]
  });

}());

(function(){

  app.component('symbolValue', {
    templateUrl: 'components/symbol-value/symbol-value-template.html',
    transclude: true,
    bindings: {
      symbol: '@'
    }
  });

}());

(function(){

  function topbarController($window){
    var _public = this;

    _public.back = function(){
      $window.history.back();
    };
  }

  app.component('topbar', {
    templateUrl: 'components/topbar/topbar-template.html',
    controller: ['$window', topbarController],
    transclude: true,
    bindings: {
      title: '@'
    }
  });

}());

(function(){

  function viewportController($window, $scope){
    var _public = this;

    _public.$onDestroy = function(){
      $window.removeEventListener('resize', refreshViewportHeight);
    };

    function setViewportHeight(){
      _public.style = {
        height: getViewportHeight()
      };
    }

    function getViewportHeight(){
      var topbarHeight = ionic.Platform.isIOS() ? 70 : 50;
      return ($window.innerHeight-topbarHeight) + 'px';
    }

    function refreshViewportHeight(){
      setViewportHeight();
      $scope.$digest();
    }

    $window.addEventListener('resize', refreshViewportHeight);

    setViewportHeight();
  }

  app.component('viewport', {
    templateUrl: 'components/viewport/viewport-template.html',
    transclude: true,
    controller: ['$window', '$scope', viewportController]
  });

}());

(function(){

  'use strict';

  app.constant('TRACKS', {
    settingsForm: {
      submitted: 'submitted setting forms'
    }
  });

}());

(function(){

  function brlCurrencyFilter($filter){

    return function(number, symbol, precision){
      symbol = symbol || '';
      precision = precision || 2;
      amount = $filter('commaDecimal')(number, precision);
      return [symbol, amount].join(' ');
    };

  }

  app.filter('brlCurrency', ['$filter', brlCurrencyFilter]);

}());

(function(){

  function commaDecimalFilter($filter){

    return function(number, precision){
      precision = precision || 0;
      number = $filter('number')(number, precision);
      return number
        .replace(/\./g,'DECIMAL')
        .replace(/,/g,'.')
        .replace(/DECIMAL/g,',');
    };

  }

  app.filter('commaDecimal', ['$filter', commaDecimalFilter]);

}());

(function(){

  app.service('retirementSimulationService', [
    '$window',
    function($window){

      var _public = {};

      var NUMBER_OF_MONTHS_IN_YEAR = 12;
      var DEFAULT_DATE_FORMAT = 'MMM \'YY';
      var balance = 0;
      var monthlyContribution = 0;
      var monthlyBenefitAmount = 0;

      _public.build = function(settings){
        var transactions = [];
        var period = getContributionPeriodInMonths(settings.contributionPeriod);
        var monthlyProfitability = getMonthlyProfitability(settings.annualInterest, settings.annualInflation);

        balance = settings.initialDeposit;
        for (var i = 0; i < period; i++)
          transactions.push(buildMonthDetails(i, settings, monthlyProfitability));

        return transactions;
      };

      _public.getMonthlyBenefitAmount = function(){
        return monthlyBenefitAmount;
      };

      function getContributionPeriodInMonths(contributionPeriodInYears){
        return contributionPeriodInYears * NUMBER_OF_MONTHS_IN_YEAR;
      }

      function getMonthlyProfitability(interest, inflation){
        return (interest / NUMBER_OF_MONTHS_IN_YEAR) / 100;
      }

      function buildMonthDetails(month, settings, monthlyProfitability){
        var contribution = getMonthlyContribution(month, settings);
        var profit = getMonthlyProfit(month, monthlyProfitability);
        var balance = calculateBalance(month, contribution, profit);
        return {
          date: buildMonthDate(month),
          monthlyContribution: contribution,
          monthlyProfit: profit,
          balance: balance
        };
      }

      function buildMonthDate(month){
        return moment().add(month, 'months').toDate();
      }

      function getMonthlyContribution(month, settings){
        if(!monthlyContribution)
          monthlyContribution = settings.monthlyContribution;
        else
          monthlyContribution = adjustMonthlyContribution(month, monthlyContribution, settings);

        return month ? monthlyContribution : 0;
      }

      function adjustMonthlyContribution(month, monthlyContribution, settings){
        if(month && month % NUMBER_OF_MONTHS_IN_YEAR === 0)
          return monthlyContribution * (1 + settings.annualInflation / 100);
        return monthlyContribution;
      }

      function getMonthlyProfit(month, monthlyProfitability){
        return month ? balance * monthlyProfitability : 0;
      }

      function calculateBalance(month, contribution, profit){
        if(month)
          balance += profit + contribution;
        return balance;
      }

      return _public;

  }]);

}());

(function(){

  app.service('storageService', [
    '$window',
    function($window){

      var _public = {};

      _public.set = function(key, value){
        $window.localStorage.setItem(key, value);
      };

      _public.get = function(key){
        return $window.localStorage.getItem(key);
      };

      _public.remove = function(key){
        return $window.localStorage.removeItem(key);
      };

      return _public;

  }]);

}());

(function(){

  app.service('trackService', function(){

    var _public = {};

    _public.track = function(label, details){
      if(mixpanel)
        mixpanel.track(label, details);
    };

    return _public;

  });

}());

//# sourceMappingURL=bundle.min.js.map